ArrayList<classBoid> boids;
int numBoids = 100;

void setup() {
  size(800, 600);
  boids = new ArrayList<classBoid>();

  for (int i = 0; i < numBoids; i++) {
    classBoid boid = new classBoid(random(width), random(height));
    boids.add(boid);
  }
}

void draw() {
  background(255);

  for (classBoid boid : boids) {
    boid.update(boids);
    boid.display();
  }
}

class classBoid {
  PVector position;
  PVector velocity;
  PVector acceleration;
  float maxSpeed = 3;
  float maxForce = 0.05;

  classBoid(float x, float y) {
    position = new PVector(x, y);
    velocity = PVector.random2D();
    acceleration = new PVector();
  }

  void update(ArrayList<classBoid> boids) {
    flock(boids);
    updatePosition();
    wrapEdges();
  }

  void flock(ArrayList<classBoid> boids) {
    PVector separation = separate(boids);
    PVector alignment = align(boids);
    PVector cohesion = cohere(boids);

    separation.mult(1.5);
    alignment.mult(1.0);
    cohesion.mult(1.0);

    acceleration.add(separation);
    acceleration.add(alignment);
    acceleration.add(cohesion);
  }

  PVector separate(ArrayList<classBoid> boids) {
    float desiredSeparation = 25;
    PVector sum = new PVector();
    int count = 0;

    for (classBoid other : boids) {
      float distance = PVector.dist(position, other.position);

      if (distance > 0 && distance < desiredSeparation) {
        PVector diff = PVector.sub(position, other.position);
        diff.normalize();
        diff.div(distance);
        sum.add(diff);
        count++;
      }
    }

    if (count > 0) {
      sum.div(count);
      sum.setMag(maxSpeed);
      sum.sub(velocity);
      sum.limit(maxForce);
    }

    return sum;
  }

  PVector align(ArrayList<classBoid> boids) {
    float neighborDistance = 50;
    PVector sum = new PVector();
    int count = 0;

    for (classBoid other : boids) {
      float distance = PVector.dist(position, other.position);

      if (distance > 0 && distance < neighborDistance) {
        sum.add(other.velocity);
        count++;
      }
    }

    if (count > 0) {
      sum.div(count);
      sum.setMag(maxSpeed);
      sum.sub(velocity);
      sum.limit(maxForce);
    }

    return sum;
  }

  PVector cohere(ArrayList<classBoid> boids) {
    float neighborDistance = 50;
    PVector sum = new PVector();
    int count = 0;

    for (classBoid other : boids) {
      float distance = PVector.dist(position, other.position);

      if (distance > 0 && distance < neighborDistance) {
        sum.add(other.position);
        count++;
      }
    }

    if (count > 0) {
      sum.div(count);
      PVector desired = PVector.sub(sum, position);
      desired.setMag(maxSpeed);
      PVector steer = PVector.sub(desired, velocity);
      steer.limit(maxForce);
      return steer;
    }

    return sum;
  }

  void updatePosition() {
    velocity.add(acceleration);
    velocity.limit(maxSpeed);
    position.add(velocity);
    acceleration.mult(0);
  }

  void wrapEdges() {
    if (position.x < 0) {
      position.x = width;
    }
    if (position.x > width) {
      position.x = 0;
    }
    if (position.y < 0) {
      position.y = height;
    }
    if (position.y > height) {
      position.y = 0;
    }
  }

  void display() {
    float theta = velocity.heading() + radians(90);

    pushMatrix();
    translate(position.x, position.y);
    rotate(theta);
    fill(0);
    stroke(0);
    triangle(0, -10, -5, 10, 5, 10);
    popMatrix();
  }
}
